#!/bin/bash
# Default variables 
PACKAGE_NAME="${PACKAGE_NAME:-transmission}"  # also define in PKG_PRE_REMOVE as that doesn't have access to these variables 
DOCKER_IMAGE="${DOCKER_IMAGE:-linuxserver/transmission:4.0.6}"

# Unified logging functions
log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [INFO] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
}
warn_log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [WARN] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t1 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
}
err_log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t2 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
    exit 1
}

no_op() {
    log "No operation specified. Running a placeholder function."
}

# System functions - detect volume, QPKG directory path, package path and verify binary paths, etc.
detect_primary_volume() {
    PRIMARY_VOLUME=$(getcfg SHARE_DEF defVolMP -d "" -f /etc/config/def_share.info)
    if [ -z "$PRIMARY_VOLUME" ]; then
        err_log "Primary volume not found. Exiting."
    fi
}

resolve_qpkg_path() {
    QPKG_DIR="${PRIMARY_VOLUME}/.qpkg"
    if [ -L "$QPKG_DIR" ]; then
        QPKG_DIR=$(readlink -f "$QPKG_DIR") || err_log "Failed to resolve symbolic link for .qpkg directory."
    fi
    QPKG_PATH="${QPKG_DIR}/${PACKAGE_NAME}"
    CONFIG_DIR="${QPKG_PATH}/config"
}

verify_container_station() {
    if [ ! -d "${PRIMARY_VOLUME}/.qpkg/container-station" ]; then
        err_log "Container Station is not installed. Please install it first."
    fi
}

prepare_directories() {
    mkdir -p "$QPKG_PATH" "$CONFIG_DIR" || err_log "Failed to create necessary directories at $QPKG_PATH or $CONFIG_DIR."
    log "Directories prepared successfully."
}

detect_docker_binary() {
    CONTAINER_STATION_DIR=$(/sbin/getcfg container-station Install_Path -f /etc/config/qpkg.conf)
    DOCKER_PATH="$CONTAINER_STATION_DIR/bin/docker"
    if [ -z "$DOCKER_PATH" ] || [ ! -x "$DOCKER_PATH" ]; then
        err_log "Docker binary not found or is not executable. Ensure Container Station is installed and accessible."
    fi
    export PATH="$(dirname "$DOCKER_PATH"):$PATH"
}

detect_docker_compose() {
    detect_docker_binary
    if ! "$DOCKER_PATH" compose version >/dev/null 2>&1; then
        err_log "docker compose not found or not working. Ensure Docker Compose plugin is installed."
    fi
}

# Read from smb and create a mount file with all the volume mapping
create_all_mounts_file() {
    log "Creating all_mounts file in the config directory"
    detect_primary_volume
    resolve_qpkg_path
    SMB_CONF="/etc/config/smb.conf"
    ALL_MOUNTS_FILE="${CONFIG_DIR}/all_mounts"
    if [ ! -f "$SMB_CONF" ]; then
        err_log "Shared folders configuration file not found: $SMB_CONF"
        return 1
    fi
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR" || err_log "Failed to create config directory: $CONFIG_DIR"
    fi
    # Start fresh by emptying the file
    > "$ALL_MOUNTS_FILE"
    grep "^\[" "$SMB_CONF" | sed 's/\[\(.*\)\]/\1/' | while read -r SHARE_NAME; do
        SHARE_PATH=$(/sbin/getcfg "$SHARE_NAME" path -f "$SMB_CONF")
        if [ -n "$SHARE_PATH" ] && [ -d "$SHARE_PATH" ]; then
            if [ -w "$SHARE_PATH" ]; then
                CONTAINER_PATH="/mnt/${SHARE_NAME}"
                echo "-v ${SHARE_PATH}:${CONTAINER_PATH}:rw" >> "$ALL_MOUNTS_FILE"
            else
                warn_log "Skipping share without RW access: $SHARE_NAME ($SHARE_PATH)"
            fi
        else
            warn_log "Skipping invalid or missing share: $SHARE_NAME ($SHARE_PATH)"
        fi
    done
}

# YAML file generation with volumes from mount file
create_docker_compose_file() {
    create_all_mounts_file
    COMPOSE_FILE="${QPKG_PATH}/docker-compose.yml"
    cat > "$COMPOSE_FILE" <<EOF
version: "3.8"
services:
  ${PACKAGE_NAME}:
    image: ${DOCKER_IMAGE}
    container_name: ${PACKAGE_NAME}
    ports:
      - "9091:9091"
      - "51413:51413"
      - "51413:51413/udp"
    environment:
      USER: "qnap_transmission"
      PASS: "transmission_password"
    volumes:
      - "${CONFIG_DIR}:/config"
EOF
    # Append additional volume mounts discovered from smb.conf
    MOUNT_FILE="${CONFIG_DIR}/all_mounts"
    if [ -f "$MOUNT_FILE" ]; then
        while IFS= read -r LINE; do
            if [[ $LINE == -v* ]]; then
                # Remove leading "-v " and any quotes
                MOUNT_ENTRY=$(echo "$LINE" | sed 's/^-v //;s/"//g')
                echo "      - \"$MOUNT_ENTRY\"" >> "$COMPOSE_FILE"
            fi
        done < "$MOUNT_FILE"
    fi
    log "Docker Compose file created at: $COMPOSE_FILE"
}

create_container() {
    log "Creating/Starting the ${PACKAGE_NAME} container using docker compose..."
    create_docker_compose_file
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" up -d
    if [ $? -eq 0 ]; then
        log "${PACKAGE_NAME} container created and started successfully via docker compose."
    else
        err_log "Failed to create/start ${PACKAGE_NAME} container using docker compose."
        return 1
    fi
}

# Package functions for install, remove, etc.
pkg_install() {
    log "Starting ${PACKAGE_NAME} installation..."
    detect_primary_volume
    resolve_qpkg_path
    verify_container_station
    detect_docker_compose
    prepare_directories
    # Copy package_routines
    local PACKAGE_ROUTINES_SRC="$(dirname "$0")/package_routines"
    if [ ! -f "$PACKAGE_ROUTINES_SRC" ]; then
        err_log "package_routines not found in $(dirname "$0")."
    fi
    cp "$PACKAGE_ROUTINES_SRC" "$QPKG_PATH" || err_log "Failed to copy package_routines to $QPKG_PATH."
    log "package_routines copied successfully."
    # Pull the Docker image (docker compose up will pull if needed; we do it explicitly here)
    log "Pulling ${PACKAGE_NAME} Docker image from Docker Hub..."
    "$DOCKER_PATH" pull ${DOCKER_IMAGE} || err_log "Failed to pull ${PACKAGE_NAME} Docker image."
    log "Docker image pulled successfully."
    # Create (and start) the container using docker compose
    create_container
    log "Verifying container creation..."
    pkg_start
}

pkg_post_install() {
    log "Running post-installation steps for ${PACKAGE_NAME}..."
    resolve_qpkg_path
    /sbin/setcfg "$QPKG_NAME" depend_on "container-station" -f /etc/config/qpkg.conf
    /sbin/setcfg "$QPKG_NAME" Timeout "120,60" -f /etc/config/qpkg.conf
    /sbin/setcfg "$QPKG_NAME" Enable TRUE -f /etc/config/qpkg.conf
    log "Post-installation steps completed successfully."
}

pkg_start() {
    log "Starting ${PACKAGE_NAME} container using docker compose..."
    detect_primary_volume
    resolve_qpkg_path
    detect_docker_compose
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" up -d
    # Check if the container is running by filtering for running services.
    RUNNING_SERVICE=$("$DOCKER_PATH" compose -f "$DC_FILE" ps --services --filter "status=running" | grep -w "${PACKAGE_NAME}")
    if [ -n "$RUNNING_SERVICE" ]; then
        log "${PACKAGE_NAME} container started successfully."
    else
        err_log "Failed to start ${PACKAGE_NAME} container using docker compose."
    fi
}

pkg_stop() {
    log "Stopping ${PACKAGE_NAME} container using docker compose..."
    detect_docker_compose
    detect_primary_volume
    resolve_qpkg_path
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" stop
    # Check if the container is no longer running.
    RUNNING_SERVICE=$("$DOCKER_PATH" compose -f "$DC_FILE" ps --services --filter "status=running" | grep -w "${PACKAGE_NAME}")
    if [ -z "$RUNNING_SERVICE" ]; then
        log "${PACKAGE_NAME} container stopped successfully."
    else
        err_log "Failed to stop ${PACKAGE_NAME} container using docker compose."
    fi
}

# We only give a pre_remove and let QNAP handle the uninstall itself.
# We do the docker compose down without rmi; QNAP will handle the rest.
PKG_PRE_REMOVE="{
    PACKAGE_NAME='${PACKAGE_NAME:-transmission}'
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a '[INFO] PKG_PRE_REMOVE: Beginning removal process...'
    # Reinitialize necessary variables inline.
    CONTAINER_STATION_DIR=\$(/sbin/getcfg container-station Install_Path -f /etc/config/qpkg.conf)
    DOCKER_PATH=\"\${CONTAINER_STATION_DIR}/bin/docker\"
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a \"[INFO] Docker binary path: \$DOCKER_PATH\"
    PRIMARY_VOLUME=\$(getcfg SHARE_DEF defVolMP -d '' -f /etc/config/def_share.info)
    if [ -z \"\$PRIMARY_VOLUME\" ]; then
        /sbin/log_tool -t2 -uSystem -p127.0.0.1 -mlocalhost -a '[ERROR] Primary volume not found. Exiting.'
        exit 1
    fi
    QPKG_DIR=\"\${PRIMARY_VOLUME}/.qpkg/\${PACKAGE_NAME}\"
    CONFIG_DIR=\"\${QPKG_DIR}/config\"
    QPKG_PATH=\"\$QPKG_DIR\"
    DC_FILE=\"\$QPKG_PATH/docker-compose.yml\"
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a \"[INFO] Docker Compose YAML file path: \$DC_FILE\"
    # Change to the QPKG directory.
    cd \"\$QPKG_PATH\" || exit 1
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a '[INFO] Attempting to bring down the container using docker compose down...]'
    # Run docker compose down, capture output and exit code.
    OUTPUT=\$(\"\$DOCKER_PATH\" compose -f \"\$DC_FILE\" down 2>&1)
    EXIT_CODE=\$?
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a \"[INFO] docker compose down exited with code \$EXIT_CODE. Output: \$OUTPUT\"
    if [ \$EXIT_CODE -ne 0 ]; then
        /sbin/log_tool -t1 -uSystem -p127.0.0.1 -mlocalhost -a '[WARN] docker compose down failed.'
    fi
}"

# Main Entry Point
if [ -z "$1" ]; then
    set -- no_op
fi

case "$1" in
    install) pkg_install ;;
    start) pkg_start ;;
    stop) pkg_stop ;;
    no_op) no_op ;;
    *) err_log "Invalid action: $1. Use install, start, stop, remove, or no_op." ;;
esac
